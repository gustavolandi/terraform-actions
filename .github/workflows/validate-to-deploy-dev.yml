name: Validate
on:
  workflow_call:
    inputs:
      TF_STATE_BUCKET_NAME:
        description: "bucket name terraform state"
        required: true
        type: string
      TF_STATE_KEY_PATH:
        description: "bucket name terraform state"
        required: true
        type: string
      TF_STATE_REGION:
        description: "aws region bucket for terraform state"
        required: false
        default: "sa-east-1"
        type: string
      PROJECT_VARIABLES_FILE:
          description: "file path for environment variables"
          required: false
          default: "infra/dev/parameters.tfvars"
          type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
          required: true

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

jobs:
  test1:
    name: Teste variavel
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Teste Step
        run: |
          echo "test_variable=teste" >> $GITHUB_ENV
  test2:
    name: Teste variavel 2
    needs:
      - test1
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v4
      - name: Teste Step Variable Echo
        run: |
          echo "$test_variable"

  terraform_validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Read and Validate Deploy Information
      run: |
        echo "terraform_log=INFO" >> $GITHUB_ENV
        
        if [ -f deploy-information.txt ]; then
            while IFS='=' read -r key value || [ -n "$key" ]; do
              key=$(echo "$key" | xargs) # Remove espaços extras
              value=$(echo "$value" | sed 's/;$//' | xargs) # Remove ';' e espaços extras

              if [ "$key" == "terraform_log" ]; then
                case "$value" in
                  TRACE|DEBUG|INFO|WARN|ERROR)
                    echo "Valid log level: $value"
                    ;;
                  *)
                    echo "Invalid log level: $value. Defaulting to INFO."
                    value="INFO"
                    ;;
                esac
              fi

            echo "$key=$value" >> $GITHUB_ENV
          done < deploy-information.txt
        else
          echo "deploy-information.txt not found!"
          exit 1
        fi
    - name: Validate Deploy Information
      run: |
        if [[ "$destroy" != "true" && "$destroy" != "false" ]]; then
          echo "Invalid value for 'destroy'. Expected 'true' or 'false'. Found: $destroy"
          exit 1
        fi
    - name: Terraform Plan
      run: |
        TF_LOG=$terraform_log terraform init \
          -backend-config="bucket=${{inputs.TF_STATE_BUCKET_NAME}}" \
          -backend-config="key=${{inputs.TF_STATE_KEY_PATH}}/terraform.tfstate" \
          -backend-config="region=${{inputs.TF_STATE_REGION}}"
        terraform validate
        terraform workspace select dev || terraform workspace new dev
        terraform plan -var-file="${{inputs.PROJECT_VARIABLES_FILE}}"
  
  pull_request:
    name: Pull Request
    runs-on: ubuntu-latest
    needs:
      - terraform_validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create Pull Request To develop
        continue-on-error: true
        run: gh pr create -B develop  -H ${{ github.head_ref || github.ref_name }} --title 'Merge ${{ github.head_ref || github.ref_name }} into develop' --body 'Created by Github action'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
